""" Decorates are allows u to modify the behaviour of a function or class without
 directly"""

# def deco_func(func):
#     def wrapper():
#         print("before function execution")
#         func()
#         print('after function execution')
#     return wrapper
# @deco_func
# def my_func():
#     print('inside the my_func')
# my_func()
# dec_function=deco_func(my_func)
# dec_function()
#?????????????????????????????????????????????????????????????????????
# def deco_fun(func):
#     def inner():
#         print("i got decorator")
#         func()
#     return inner
# @deco_fun
# def test_func():
#     print("a test func")
# test_func()
# deco_fun=deco_fun(test_func)
# deco_fun()
#???????????????????????????????????????????????????????????????????????????
def upper_decor(func):
    def wrapper(name):
        result=func(name)
        out= "hello " +result.upper()
        return out
        # print("hello",out)
        # return result.upper()
    return wrapper
@upper_decor
def hello_name(name):
    # print("hello")
    return name
# hello_name("Karthick")
print(hello_name("Karthick"))